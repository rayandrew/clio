@options timing
# @options tracing

@define ENV_NAME "clio"
@define PATH "${MAMBA_ROOT_PREFIX}/envs/${ENV_NAME}/bin:${PATH}"
@define CUBLAS_WORKSPACE_CONFIG ":4096:8"
@define TF_CPP_MIN_LOG_LEVEL "3"
@define CUDA "${CUDA:-0}"
@define PYTORCH_CUDA_ALLOC_CONF "expandable_segments:True"
@define FORCE "false"

############################################################
#                       LIBRARIES
############################################################

@lib assert
  assert() {
    if [[ "$1" = "false" ]] || [[ "$1" = "0" ]]; then
      echo "Assertion failed: $2"
      exit 1
    fi
  }


  is_bool() {
    if [[ "$1" != "true" ]] && [[ "$1" != "false" ]] && [[ "$1" != "1" ]] && [[ "$1" != "0" ]]; then
      echo "false"
    else
      echo "true"
    fi
  }

  is_not_bool() {
    bool=$(is_bool $1)
    if [[ "$bool" = "true" ]]; then
      echo "false"
    else
      echo "true"
    fi
  }

  is_empty() {
    if [[ -z "$1" ]]; then
      echo 1
    elif [[ "$1" = "" ]]; then
      echo 1
    else
      echo 0
    fi
  }

  is_not_empty() {
    empty=$(is_empty $1)
    if [[ "$empty" = "1" ]]; then
      echo 0
    else
      echo 1
    fi
  }
  
  normalize_bool() {
    if [[ "$1" = "true" ]] || [[ "$1" = "1" ]]; then
      echo "true"
    else
      echo "false"
    fi
  }

############################################################
#                       GENERAL 
############################################################

@goal check_cuda
  echo "CUDA version: $(nvcc --version)"
  python -c "import torch; print(torch.cuda.is_available())"

############################################################
#                       FLASHNET
############################################################

@goal flashnet_get_alibaba_data
@reached_if [[ -f "raw-data/flashnet/alibaba-data/done" ]]
  mkdir -p "raw-data/flashnet/alibaba-data"
  DIRS=$(ssh -p 23 -m hmac-sha2-512 u369179-sub4@box.rs.ht "ls -d /home/trace_ori_60mins/alibaba.*")
  parallel --jobs 8 --line-buffer "rsync -Pavzr -e 'ssh -p 23 -m hmac-sha2-512' --include='*/' --include='*.labeled' --exclude='*' u369179-sub4@box.rs.ht:{} raw-data/flashnet/alibaba-data" ::: $DIRS
  echo "Alibaba data downloaded" > "raw-data/flashnet/alibaba-data/done"

@goal flashnet_get_msr_data
@reached_if [[ -f "raw-data/flashnet/msr-data/done" ]]
  mkdir -p "raw-data/flashnet/msr-data"
  DIRS=$(ssh -p 23 -m hmac-sha2-512 u369179-sub4@box.rs.ht "ls -d /home/trace_ori_60mins/msr.*")
  parallel --jobs 8 --line-buffer "rsync -Pavzr -e 'ssh -p 23 -m hmac-sha2-512' --include='*/' --include='*.labeled' --exclude='*' u369179-sub4@box.rs.ht:{} raw-data/flashnet/alibaba-data" ::: $DIRS
  echo "MSR data downloaded" > "raw-data/flashnet/msr-data/done"

@goal flashnet_get_tencent_data
@reached_if [[ -f "raw-data/flashnet/tencent-data/done" ]]
  mkdir -p "raw-data/flashnet/tencent-data"
  DIRS=$(ssh -p 23 -m hmac-sha2-512 u369179-sub4@box.rs.ht "ls -d /home/trace_ori_60mins/tencent.*")
  parallel --jobs 8 --line-buffer "rsync -Pavzr -e 'ssh -p 23 -m hmac-sha2-512' --include='*/' --include='*.labeled' --exclude='*' u369179-sub4@box.rs.ht:{} raw-data/flashnet/alibaba-data" ::: $DIRS
  echo "Tencent data downloaded" > "raw-data/flashnet/tencent-data/done"

# ==========================================================
# Experiment: Preprocess 
# ==========================================================

@goal flashnet_preprocess_alibaba_data
@reached_if [[ -f "data/flashnet/preprocess/alibaba.per_60mins.iops_p100.alibaba_9087.1/done" ]]
  python -m clio.flashnet.cli.preprocessing \
      "raw-data/flashnet/alibaba-data/alibaba.per_60mins.iops_p100.alibaba_9087.1" \
      --output "data/flashnet/preprocess/alibaba.per_60mins.iops_p100.alibaba_9087.1"
  touch "data/flashnet/preprocess/alibaba.per_60mins.iops_p100.alibaba_9087.1/done"

@goal flashnet_characteristic_analysis
@reached_if [[ -f "data/flashnet/characteristics/analysis/alibaba/done" ]]
  python -m clio.flashnet.cli.characteristic analyze \
      raw-data/flashnet/alibaba-data-chosen/alibaba.* \
      --output "data/flashnet/characteristics/analysis/alibaba" \
      --window-size 1m
  # touch data/flashnet/characteristics/analysis/done

@goal flashnet_characteristic_split
@reached_if [[ -f "data/flashnet/characteristics/split/done" ]]
  python -m clio.flashnet.cli.characteristic split \
      raw-data/flashnet/alibaba-data-chosen/alibaba.* \
      --output "data/flashnet/characteristics/split/alibaba" \
      --window-size 1m
  touch data/flashnet/characteristics/split/done

@goal flashnet_characteristic_calculate
@reached_if [[ -f "data/flashnet/characteristics/calculate/alibaba/done" ]]
  python -m clio.flashnet.cli.characteristic calculate \
      data/flashnet/characteristics/split/alibaba \
      --characteristic "data/flashnet/characteristics/analysis/alibaba/characteristics.msgpack" \
      --output "data/flashnet/characteristics/calculate/alibaba"
  # touch data/flashnet/characteristics/calculate/done

@goal flashnet_characteristic_generate
@reached_if [[ -f "data/flashnet/characteristics/generate/alibaba/done" ]]
  python -m clio.flashnet.cli.characteristic generate \
      data/flashnet/characteristics/split/alibaba \
      --list-file "./generate-window.nim" \
      --output "data/flashnet/characteristics/generate/alibaba"
  # touch data/flashnet/characteristics/generate/alibaba/done

@goal flashnet_characteristic_generate_relabel
@reached_if [[ -f "data/flashnet/characteristics/generate/alibaba/done" ]]
  python -m clio.flashnet.cli.characteristic generate \
      data/flashnet/characteristics/split/alibaba \
      --list-file "./generate-window.nim" \
      --output "data/flashnet/characteristics/generate-relabel/alibaba" \
      --relabel

@goal flashnet_characteristic_generate_static_prev_df
@reached_if [[ -f "data/flashnet/characteristics/generate/alibaba/done" ]]
  python -m clio.flashnet.cli.characteristic generate \
      data/flashnet/characteristics/split/alibaba \
      --list-file "./generate-window.nim" \
      --output "data/flashnet/characteristics/generate/alibaba-static-prev-df" \
      --static-prev-df
  # touch data/flashnet/characteristics/generate/alibaba/done


# ==========================================================
# Experiment: Impact Analysis
# ==========================================================

@goal flashnet.impact.exp @params NAME _FORCE
@use_lib assert
@reached_if [[ -f "data/flashnet/impact/exp/alibaba/$NAME/done" ]] && [[ "$(normalize_bool $_FORCE)" = "false" ]]
  assert $(is_not_empty $NAME) "Please provide a NAME"
  echo "Running experiment for $NAME on CUDA $CUDA"
  python -m clio.flashnet.cli.impact exp \
      "data/flashnet/characteristics/generate/alibaba/preprocessed/$NAME" \
      --output "data/flashnet/impact/exp/alibaba/$NAME" \
      --cuda $CUDA
  echo "Experiment done" > "data/flashnet/impact/exp/alibaba/$NAME/done"

@goal flashnet.impact.analysis @params NAME
@use_lib assert
  assert $(is_not_empty $NAME) "Please provide a NAME"
  echo "Running analysis for $NAME"
  python -m clio.flashnet.cli.impact analyze \
    "data/flashnet/impact/exp/alibaba/$NAME" \
    --output "data/flashnet/impact/analysis/alibaba/$NAME"

@define FLASHNET_IMPACT_NAME ""

@goal flashnet.impact
@depends_on flashnet.impact.exp @args FLASHNET_IMPACT_NAME FORCE
@depends_on flashnet.impact.analysis @args FLASHNET_IMPACT_NAME

# @goal flashnet_impact_all 
# @depends_on flashnet_impact @args "size_avg_single_file"

# ==========================================================
# Experiment: Student Management
# ==========================================================

@goal flashnet.student.exp @params NAME _FORCE
@use_lib assert
@reached_if [[ -f "data/flashnet/student/exp/alibaba/$NAME/done" ]] && [[ "$(normalize_bool $_FORCE)" = "false" ]]
  assert $(is_not_empty $NAME) "Please provide a NAME"
  echo "Running experiment for $NAME on CUDA $CUDA"
  python -m clio.flashnet.cli.student exp \
      "data/flashnet/characteristics/generate/alibaba/preprocessed/$NAME" \
      --output "data/flashnet/student/exp/alibaba/$NAME" \
      --cuda $CUDA \
      --epochs 5
  echo "Experiment done" > "data/flashnet/student/exp/alibaba/$NAME/done"

@goal flashnet.student.analysis @params NAME
@use_lib assert
  assert $(is_not_empty $NAME) "Please provide a NAME"
  echo "Running analysis for $NAME"
  echo "Nothing for now..."
  # python -m clio.flashnet.cli.student analyze \
  #   "data/flashnet/student/exp/alibaba/$NAME" \
  #   --output "data/flashnet/student/analysis/alibaba/$NAME"

@define FLASHNET_STUDENT_NAME ""

@goal flashnet.student
@depends_on flashnet.student.exp @args FLASHNET_STUDENT_NAME FORCE
@depends_on flashnet.student.analysis @args FLASHNET_STUDENT_NAME

# ==========================================================
# Experiment: Workload Prediction
# ==========================================================

@goal flashnet_wp
@reached_if [[ -f "data/flashnet/wp/alibaba.per_60mins.iops_p100.alibaba_9087.1/done" ]]
  export CUDA_VISIBLE_DEVICES="1"
  python -m clio.flashnet.cli.workload_prediction exp \
      "data/flashnet/preprocess/alibaba.per_60mins.iops_p100.alibaba_9087.1" \
      --output "data/analysis/flashnet/wp/alibaba.per_60mins.iops_p100.alibaba_9087.1" \
      --batch-size 32 \
      --window-size 1m \
      --duration 1h
    touch data/analysis/flashnet/wp/alibaba.per_60mins.iops_p100.alibaba_9087.1/done

@goal flashnet_workload_prediction
@reached_if [[ -f "data/analysis/flashnet/workload-prediction.window_1m.duration_1h/done" ]]
  python -m clio.flashnet.cli.workload_prediction \
      "raw-data/flashnet/generated-window/test_8_hours" \
      --output "data/analysis/flashnet/workload-prediction.window_1m.duration_1h" \
      --window-size 1m \
      --duration 1h \
      --prediction-batch-size 16384
  echo "Workload prediction done" > "data/analysis/flashnet/workload-prediction.window_1m.duration_1h/done"
