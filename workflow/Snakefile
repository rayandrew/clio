import os
import sys
from snakemake.utils import min_version

from pathlib import Path

###### minimum snakemake version ######
min_version("8.0")

# register storage provider (not needed if no custom settings are to be defined here)
storage box:
    provider="sftp"

MSRC_CHUNKS = {
  "hm": 2,
  "mds": 2,
  "prn": 2,
  "proj": 5,
  "prxy": 2,
  "rsrch": 3,
  "src1": 3,
  "src2": 3,
  "stg": 2,
  "ts": 1,
  "usr": 3,
  "wdev": 4,
  "web": 4,
}

def get_data(query):
    return storage.box(f"sftp://box.rs.ht:23/home/{query}", keep_local=True)

def get_msrc_data(trace):
    if trace in MSRC_CHUNKS:
        return [get_data(f"msrc/{trace}_{i}.csv.gz") for i in range(MSRC_CHUNKS[trace])]
    return [get_data(f"msrc/{trace}.csv.gz")]

rule msrc_standardize:
  input:
    lambda wildcards: get_msrc_data(wildcards.trace),
  output:
    "data/standardized/msrc/{trace}/{trace}.trace",
    "data/standardized/msrc/{trace}/log.txt",
  log:
    "logs/standardized/msrc/{trace}/{trace}.log",
  shell:
    "python -m clio.trace.standardizer msrc {input} --output $(dirname {output[0]})"

rule msrc_quick_analyze:
  input:
    "data/standardized/msrc/{trace}/{trace}.trace",
  output:
    "data/analysis/msrc/{trace}/quick/stats.stats",
    "data/analysis/msrc/{trace}/quick/log.txt",
  log:
    "logs/analysis/msrc/{trace}/quick/{trace}.log",
  shell:
    "python -m clio.trace.analyzer quick {input} --output $(dirname {output[0]})"

rule msrc_window_analyze:
  input:
    "data/standardized/msrc/{trace}/{trace}.trace",
  output:
    "data/analysis/msrc/{trace}/win_{seconds}s/stats.stats",
    "data/analysis/msrc/{trace}/win_{seconds}s/stats.msgpack",
    "data/analysis/msrc/{trace}/win_{seconds}s/log.txt",
  log:
    "logs/analysis/msrc/{trace}/win_{seconds}s/{trace}.log",
  shell:
    """
    python -m clio.trace.analyzer window {input} --output $(dirname {output[0]}) --window {wildcards.seconds} --log-level INFO --query "data['ts_record'] >= 0"
    """
